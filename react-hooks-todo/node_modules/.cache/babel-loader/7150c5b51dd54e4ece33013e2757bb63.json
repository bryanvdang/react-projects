{"ast":null,"code":"var _jsxFileName = \"E:\\\\App Development\\\\React\\\\react-projects\\\\react-hooks-todo\\\\src\\\\components\\\\Ingredients\\\\IngredientForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Card from '../UI/Card';\nimport './IngredientForm.css';\nimport LoadingIndicator from '../UI/LoadingIndicator'; // Line 25-29, set value to the current snapshot at array 0, on event, update our state to the amount of whatever the user types in\n// as well as pass in the input state for the other value so we don't lose the current state/previous value when updating the object, otherwise we'll get an error\n// Line 27 we create a method that returns the object body and we set the latest \"committed\" state to previous state, that we're setting with an updating function\n// therefore line 31 guarantees we get the latest state at all times\n// line 28 since we're using a closure we want to capture the event object value and update the title instead of using the same event that captured all the time\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst IngredientForm = /*#__PURE__*/_s( /*#__PURE__*/React.memo(_c = _s(props => {\n  _s();\n\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onAddIngredient({\n      title: enteredTitle,\n      amount: enteredAmount\n    }); //pointer to Ingredients.js\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"ingredient-form\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"title\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"title\",\n            value: enteredTitle,\n            onChange: event => {\n              const newTitle = event.target.value;\n              setEnteredTitle(newTitle);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"amount\",\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"amount\",\n            value: enteredAmount,\n            onChange: event => {\n              const newAmount = event.target.value;\n              setEnteredAmount(newAmount);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ingredient-form__actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Add Ingredient\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this), props.isLoading && /*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}, \"9M5sBis5T9pQwulaGoyEP41Qvfs=\")), \"9M5sBis5T9pQwulaGoyEP41Qvfs=\");\n\n_c2 = IngredientForm;\nexport default IngredientForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"IngredientForm$React.memo\");\n$RefreshReg$(_c2, \"IngredientForm\");","map":{"version":3,"sources":["E:/App Development/React/react-projects/react-hooks-todo/src/components/Ingredients/IngredientForm.js"],"names":["React","useState","Card","LoadingIndicator","IngredientForm","memo","props","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","submitHandler","event","preventDefault","onAddIngredient","title","amount","newTitle","target","value","newAmount","isLoading"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,sBAAP;AACA,OAAOC,gBAAP,MAA6B,wBAA7B,C,CACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,cAAc,iCAAGJ,KAAK,CAACK,IAAN,SAAWC,KAAK,IAAI;AAAA;;AACzC,QAAM,CAAEC,YAAF,EAAgBC,eAAhB,IAAoCP,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAAEQ,aAAF,EAAiBC,gBAAjB,IAAsCT,QAAQ,CAAC,EAAD,CAApD;;AAEA,QAAMU,aAAa,GAAGC,KAAK,IAAI;AAC7BA,IAAAA,KAAK,CAACC,cAAN;AACAP,IAAAA,KAAK,CAACQ,eAAN,CAAsB;AAACC,MAAAA,KAAK,EAAER,YAAR;AAAsBS,MAAAA,MAAM,EAAEP;AAA9B,KAAtB,EAF6B,CAEwC;AACtE,GAHD;;AAKA,sBACE;AAAS,IAAA,SAAS,EAAC,iBAAnB;AAAA,2BACE,QAAC,IAAD;AAAA,6BACE;AAAM,QAAA,QAAQ,EAAEE,aAAhB;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AAAO,YAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,EAAE,EAAC,OAAtB;AAA8B,YAAA,KAAK,EAAEJ,YAArC;AACE,YAAA,QAAQ,EAAEK,KAAK,IAAI;AACjB,oBAAMK,QAAQ,GAAGL,KAAK,CAACM,MAAN,CAAaC,KAA9B;AACAX,cAAAA,eAAe,CAACS,QAAD,CAAf;AACD;AAJH;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAUE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,kCACE;AAAO,YAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAO,YAAA,IAAI,EAAC,QAAZ;AAAqB,YAAA,EAAE,EAAC,QAAxB;AAAiC,YAAA,KAAK,EAAER,aAAxC;AACE,YAAA,QAAQ,EAAEG,KAAK,IAAI;AACjB,oBAAMQ,SAAS,GAAGR,KAAK,CAACM,MAAN,CAAaC,KAA/B;AACAT,cAAAA,gBAAgB,CAACU,SAAD,CAAhB;AACD;AAJH;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF,eAmBE;AAAK,UAAA,SAAS,EAAC,0BAAf;AAAA,kCACE;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEGd,KAAK,CAACe,SAAN,iBAAmB,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,kBAFtB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CAxCsB,kCAAH,iCAApB;;MAAMjB,c;AA0CN,eAAeA,cAAf","sourcesContent":["import React, { useState } from 'react';\n\nimport Card from '../UI/Card';\nimport './IngredientForm.css';\nimport LoadingIndicator from '../UI/LoadingIndicator'\n// Line 25-29, set value to the current snapshot at array 0, on event, update our state to the amount of whatever the user types in\n// as well as pass in the input state for the other value so we don't lose the current state/previous value when updating the object, otherwise we'll get an error\n// Line 27 we create a method that returns the object body and we set the latest \"committed\" state to previous state, that we're setting with an updating function\n// therefore line 31 guarantees we get the latest state at all times\n// line 28 since we're using a closure we want to capture the event object value and update the title instead of using the same event that captured all the time\n\nconst IngredientForm = React.memo(props => {\n  const [ enteredTitle, setEnteredTitle ] = useState('');\n  const [ enteredAmount, setEnteredAmount ] = useState('');\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onAddIngredient({title: enteredTitle, amount: enteredAmount}); //pointer to Ingredients.js\n  };\n\n  return (\n    <section className=\"ingredient-form\">\n      <Card>\n        <form onSubmit={submitHandler}>\n          <div className=\"form-control\">\n            <label htmlFor=\"title\">Name</label>\n            <input type=\"text\" id=\"title\" value={enteredTitle} \n              onChange={event => {\n                const newTitle = event.target.value;\n                setEnteredTitle(newTitle)\n              }} \n            /> \n          </div>\n          <div className=\"form-control\">\n            <label htmlFor=\"amount\">Amount</label>\n            <input type=\"number\" id=\"amount\" value={enteredAmount} \n              onChange={event => {\n                const newAmount = event.target.value;\n                setEnteredAmount(newAmount)\n              }} \n            />\n          </div>\n          <div className=\"ingredient-form__actions\">\n            <button type=\"submit\">Add Ingredient</button>\n            {props.isLoading && <LoadingIndicator />}\n            {/* {props.loading ? <LoadingIndicator /> : null} */}\n          </div>\n        </form>\n      </Card>\n    </section>\n  );\n});\n\nexport default IngredientForm;\n"]},"metadata":{},"sourceType":"module"}