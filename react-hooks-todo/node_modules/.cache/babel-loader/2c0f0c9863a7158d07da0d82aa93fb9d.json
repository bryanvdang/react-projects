{"ast":null,"code":"var _jsxFileName = \"E:\\\\App Development\\\\React\\\\react-projects\\\\react-hooks-todo\\\\src\\\\components\\\\Ingredients\\\\Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Card from '../UI/Card';\nimport './Search.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Search = /*#__PURE__*/_s( /*#__PURE__*/React.memo(_c = _s(props => {\n  _s();\n\n  const {\n    onLoadIngredients\n  } = props;\n  const [enteredFilter, setEnteredFilter] = useState('');\n  const inputRef = useRef(); //help to maintain HTTP side effects, useEffect get executed after every rerendered, not before, not simultaneous but after every render cycle\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      //if old input 500ms ago, if the old value is equal to the current value\n      if (enteredFilter === inputRef.current.value) {\n        const query = enteredFilter.length === 0 ? '' : `?orderBy=\"title\"&equalTo=\"${enteredFilter}\"`; //firebase syntax to query whats being entered\n\n        fetch('https://react-hooks-update-77b76-default-rtdb.firebaseio.com/ingredients.json' + query).then(response => response.json()).then(responseData => {\n          const loadedIngredients = [];\n\n          for (const key in responseData) {\n            loadedIngredients.push({\n              id: key,\n              title: responseData[key].ingredient.title,\n              amount: responseData[key].ingredient.amount\n            });\n          }\n\n          onLoadIngredients(loadedIngredients); //function that runs after useEffect, feeds loadedIngredients to ingredients component\n        });\n      }\n    }, 500); //cleanup function to clear previous timer\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [enteredFilter, onLoadIngredients, inputRef]); // run whenever enteredFilter changes or if the onLoadIngredients prop changes\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"search\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Filter by Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: inputRef,\n          type: \"text\",\n          value: enteredFilter,\n          onChange: event => setEnteredFilter(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}, \"Wxy+9qgcZKwBhsVbCMRMzXgTOng=\")), \"Wxy+9qgcZKwBhsVbCMRMzXgTOng=\");\n\n_c2 = Search;\nexport default Search;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Search$React.memo\");\n$RefreshReg$(_c2, \"Search\");","map":{"version":3,"sources":["E:/App Development/React/react-projects/react-hooks-todo/src/components/Ingredients/Search.js"],"names":["React","useState","useEffect","useRef","Card","Search","memo","props","onLoadIngredients","enteredFilter","setEnteredFilter","inputRef","timer","setTimeout","current","value","query","length","fetch","then","response","json","responseData","loadedIngredients","key","push","id","title","ingredient","amount","clearTimeout","event","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAkD,OAAlD;AAEA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,cAAP;;;AAEA,MAAMC,MAAM,iCAAGL,KAAK,CAACM,IAAN,SAAWC,KAAK,IAAI;AAAA;;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAwBD,KAA9B;AACA,QAAM,CAACE,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAMU,QAAQ,GAAGR,MAAM,EAAvB,CAHiC,CAK/B;;AACFD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,KAAK,GAAGC,UAAU,CAAC,MAAK;AAC5B;AACA,UAAIJ,aAAa,KAAKE,QAAQ,CAACG,OAAT,CAAiBC,KAAvC,EAA8C;AAC5C,cAAMC,KAAK,GACXP,aAAa,CAACQ,MAAd,KAAyB,CAAzB,GACE,EADF,GAEG,6BAA4BR,aAAc,GAH7C,CAD4C,CAIK;;AACjDS,QAAAA,KAAK,CAAC,kFAAkFF,KAAnF,CAAL,CACCG,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEOG,YAAY,IAAI;AACrB,gBAAMC,iBAAiB,GAAG,EAA1B;;AACA,eAAK,MAAMC,GAAX,IAAkBF,YAAlB,EAAgC;AAC9BC,YAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACrBC,cAAAA,EAAE,EAAEF,GADiB;AAErBG,cAAAA,KAAK,EAAEL,YAAY,CAACE,GAAD,CAAZ,CAAkBI,UAAlB,CAA6BD,KAFf;AAGrBE,cAAAA,MAAM,EAAEP,YAAY,CAACE,GAAD,CAAZ,CAAkBI,UAAlB,CAA6BC;AAHhB,aAAvB;AAKD;;AACDrB,UAAAA,iBAAiB,CAACe,iBAAD,CAAjB,CATqB,CASiB;AACvC,SAZD;AAaD;AACF,KArBuB,EAqBrB,GArBqB,CAAxB,CADc,CAuBd;;AACA,WAAO,MAAM;AACXO,MAAAA,YAAY,CAAClB,KAAD,CAAZ;AACD,KAFD;AAGD,GA3BQ,EA2BN,CAACH,aAAD,EAAgBD,iBAAhB,EAAmCG,QAAnC,CA3BM,CAAT,CANiC,CAiCiB;;AAElD,sBACE;AAAS,IAAA,SAAS,EAAC,QAAnB;AAAA,2BACE,QAAC,IAAD;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,GAAG,EAAEA,QADP;AAEE,UAAA,IAAI,EAAC,MAFP;AAGE,UAAA,KAAK,EAAEF,aAHT;AAIE,UAAA,QAAQ,EAAEsB,KAAK,IAAIrB,gBAAgB,CAACqB,KAAK,CAACC,MAAN,CAAajB,KAAd;AAJrC;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAjDc,kCAAH,iCAAZ;;MAAMV,M;AAmDN,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect, useRef} from 'react';\n\nimport Card from '../UI/Card';\nimport './Search.css';\n\nconst Search = React.memo(props => {\n  const { onLoadIngredients } = props;\n  const [enteredFilter, setEnteredFilter] = useState('');\n  const inputRef = useRef();\n\n    //help to maintain HTTP side effects, useEffect get executed after every rerendered, not before, not simultaneous but after every render cycle\n  useEffect(() => {\n    const timer = setTimeout(()=> {\n      //if old input 500ms ago, if the old value is equal to the current value\n      if (enteredFilter === inputRef.current.value) {\n        const query = \n        enteredFilter.length === 0\n        ? '' \n        : `?orderBy=\"title\"&equalTo=\"${enteredFilter}\"`; //firebase syntax to query whats being entered\n        fetch('https://react-hooks-update-77b76-default-rtdb.firebaseio.com/ingredients.json' + query)\n        .then(response => response.json())\n        .then (responseData => {\n          const loadedIngredients = [];\n          for (const key in responseData) {\n            loadedIngredients.push({\n              id: key,\n              title: responseData[key].ingredient.title,\n              amount: responseData[key].ingredient.amount\n            });\n          }\n          onLoadIngredients(loadedIngredients); //function that runs after useEffect, feeds loadedIngredients to ingredients component\n        });\n      }\n    }, 500 );\n    //cleanup function to clear previous timer\n    return () => {\n      clearTimeout(timer);\n    }\n  }, [enteredFilter, onLoadIngredients, inputRef]); // run whenever enteredFilter changes or if the onLoadIngredients prop changes\n\n  return (\n    <section className=\"search\">\n      <Card>\n        <div className=\"search-input\">\n          <label>Filter by Title</label>\n          <input \n            ref={inputRef}\n            type=\"text\" \n            value={enteredFilter} \n            onChange={event => setEnteredFilter(event.target.value)}/>\n        </div>\n      </Card>\n    </section>\n  );\n});\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}