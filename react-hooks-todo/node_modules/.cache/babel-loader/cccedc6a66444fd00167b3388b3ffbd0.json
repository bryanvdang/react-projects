{"ast":null,"code":"var _jsxFileName = \"E:\\\\App Development\\\\React\\\\react-projects\\\\react-hooks-todo\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport Ingredients from './components/Ingredients/Ingredients';\nimport Auth from './components/Auth';\nimport { AuthContext } from './context/auth-context'; //wrap in curly braces if its an named export\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = props => {\n  _s();\n\n  const authContext = useContext(AuthContext);\n\n  let content = /*#__PURE__*/_jsxDEV(Auth, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 17\n  }, this);\n\n  if (authContext.isAuth) {\n    content = /*#__PURE__*/_jsxDEV(Ingredients, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 15\n    }, this);\n  }\n\n  return content; // return <Ingredients />;\n};\n\n_s(App, \"g0q6N3HTsGa67OokMUhTOzE2a0M=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/App Development/React/react-projects/react-hooks-todo/src/App.js"],"names":["React","useContext","Ingredients","Auth","AuthContext","App","props","authContext","content","isAuth"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AAEA,OAAOC,WAAP,MAAwB,sCAAxB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,SAASC,WAAT,QAA4B,wBAA5B,C,CAAsD;;;;AAEtD,MAAMC,GAAG,GAAGC,KAAK,IAAI;AAAA;;AACnB,QAAMC,WAAW,GAAGN,UAAU,CAACG,WAAD,CAA9B;;AAEA,MAAII,OAAO,gBAAG,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,UAAd;;AACA,MAAID,WAAW,CAACE,MAAhB,EAAwB;AACtBD,IAAAA,OAAO,gBAAG,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAAV;AACD;;AACD,SAAOA,OAAP,CAPmB,CASnB;AACD,CAVD;;GAAMH,G;;KAAAA,G;AAYN,eAAeA,GAAf","sourcesContent":["import React, { useContext } from 'react';\n\nimport Ingredients from './components/Ingredients/Ingredients';\nimport Auth from './components/Auth'\nimport { AuthContext } from './context/auth-context'; //wrap in curly braces if its an named export\n\nconst App = props => {\n  const authContext = useContext(AuthContext);\n\n  let content = <Auth />\n  if (authContext.isAuth) {\n    content = <Ingredients />; \n  }\n  return content\n\n  // return <Ingredients />;\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}