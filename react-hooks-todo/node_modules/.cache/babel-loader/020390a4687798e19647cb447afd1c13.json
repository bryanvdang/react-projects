{"ast":null,"code":"var _jsxFileName = \"E:\\\\App Development\\\\React\\\\react-projects\\\\react-hooks-todo\\\\src\\\\components\\\\Ingredients\\\\Ingredients.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useEffect, useCallback, useMemo } from 'react';\nimport IngredientForm from './IngredientForm';\nimport Search from './Search';\nimport IngredientList from './IngredientList';\nimport ErrorModal from '../UI/ErrorModal'; //reducer takes in 2 arguments, the old state and an action\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ingredientReducer = (currentIngredients, action) => {\n  switch (action.type) {\n    case 'SET':\n      return action.ingredients;\n    //our new ingredients, SET should override current ingredients with a new list/array. Hence the ingredients property which should be an array of ingredients which will replace the old state\n\n    case 'ADD':\n      return [...currentIngredients, action.ingredient];\n\n    case 'DELETE':\n      return currentIngredients.filter(ing => ing.id !== action.id);\n\n    default:\n      throw new Error('Should not get here');\n  }\n}; //useCallback allows you to wrap a function that takes in two arguments, it caches your function for you so it survives rerender cycles\n// Line 21 when user submits a form on ingredients form, it will pass up the value to addIngredientHandler\n\n\nconst Ingredients = () => {\n  _s();\n\n  //useReducer returns something, that something is an array but with state (userIngredients). Second argument is something to set our userIngredients, \n  //which we are using in our reducer function (ingredientReducer)\n  //we'll call it dispatch because dispatch will be a function that call to dispatch these actions later in ingredientReducer.\n  //userReducer takes a first argument our reducer function and takes an optional second argument, starting state which we will set an an empty array\n  const [userIngredients, dispatch] = useReducer(ingredientReducer, []); // const [userIngredients, setUserIngredients] = useState([]);\n\n  useEffect(() => {\n    console.log('RENDERING INGREDIENTS', userIngredients);\n  }, [userIngredients]); //connect to search component, so when the user uses the filter/useEffect, it sends the data to this method\n\n  const filterIngredientsHandler = useCallback(filterIngredients => {\n    //dispatch an action, which can be anything but often its an object with a type property describing what action we want to do. And it needs an ingredients property to work properly\n    //with this we're updating our userIngredients\n    dispatch({\n      type: 'SET',\n      ingredients: filterIngredients\n    });\n  }, []); //set user ingredient should now have a id, title, and amount object\n  //user adds an ingredient, it will update the ingredients array on line 10 then to 25\n\n  const addIngredientHandler = useCallback(ingredient => {\n    dispatchHttp({\n      type: 'SEND'\n    }); // setIsLoading(true);\n\n    console.log(\"ingredient: \", ingredient); //send HTTP request, browser function, not a react function\n    //fetch will return a promise, which will resolve once this request is successfully sent or fails\n\n    fetch('https://react-hooks-update-77b76-default-rtdb.firebaseio.com/ingredients.json', {\n      method: 'POST',\n      body: JSON.stringify({\n        ingredient\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      //execute after response\n      dispatchHttp({\n        type: 'RESPONSE'\n      }); // setIsLoading(false);\n\n      return response.json(); //body of the response, will convert JSON to normal JS code. This returns a promise so we should return it then run another then function.\n    }).then(responseData => {\n      //only set the ingredien when the request is done as well as when the response parsing is finished\n      // setUserIngredients(previousIngredient => [...previousIngredient,\n      //   { id:responseData.name, ...ingredient }]);  \n      dispatch({\n        type: 'ADD',\n        ingredient: {\n          id: responseData.name,\n          ...ingredient\n        }\n      }); //response.name is a unique id generated by firebase, name will be different for other APIs\n    });\n  }, []);\n  const removeIngredientHandler = useCallback(ingredientId => {\n    console.log('removeIngredient: ', ingredientId);\n    dispatchHttp({\n      type: 'SEND'\n    }); // setIsLoading(true);\n\n    fetch(`https://react-hooks-update-77b76-default-rtdb.firebaseio.com/ingredients/${ingredientId}.json`, {\n      method: 'DELETE'\n    }).then(response => {\n      dispatchHttp({\n        type: 'RESPONSE'\n      }); // setIsLoading(false);\n      // setUserIngredients(previousIngredient => {\n      //   previousIngredient.filter(ingredient => ingredient.id !== ingredientId);\n      // });\n\n      dispatch({\n        type: 'DELETE',\n        id: ingredientId\n      });\n    }).catch(error => {\n      dispatchHttp({\n        type: 'ERROR',\n        errorMessage: 'Something went wrong'\n      }); // setError(error.message);\n      // setIsLoading(false);\n    });\n  }, []);\n  const clearError = useCallback(() => {\n    dispatchHttp({\n      type: 'CLEAR'\n    }); // setError(null); \n  }, []);\n  const ingredientList = useMemo(() => {\n    return /*#__PURE__*/_jsxDEV(IngredientList, {\n      ingredients: userIngredients,\n      onRemoveItem: removeIngredientHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this);\n  }, [userIngredients, removeIngredientHandler]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [httpState.error && /*#__PURE__*/_jsxDEV(ErrorModal, {\n      onClose: clearError,\n      children: httpState.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(IngredientForm, {\n      onAddIngredient: addIngredientHandler,\n      loading: httpState.isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(Search, {\n        onLoadIngredients: filterIngredientsHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), ingredientList]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Ingredients, \"xS9+5zzAV/Rs6CFDOIQfEpjNKww=\");\n\n_c = Ingredients;\nexport default Ingredients;\n\nvar _c;\n\n$RefreshReg$(_c, \"Ingredients\");","map":{"version":3,"sources":["E:/App Development/React/react-projects/react-hooks-todo/src/components/Ingredients/Ingredients.js"],"names":["React","useReducer","useEffect","useCallback","useMemo","IngredientForm","Search","IngredientList","ErrorModal","ingredientReducer","currentIngredients","action","type","ingredients","ingredient","filter","ing","id","Error","Ingredients","userIngredients","dispatch","console","log","filterIngredientsHandler","filterIngredients","addIngredientHandler","dispatchHttp","fetch","method","body","JSON","stringify","headers","then","response","json","responseData","name","removeIngredientHandler","ingredientId","catch","error","errorMessage","clearError","ingredientList","httpState","isLoading"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect, useCallback, useMemo } from 'react';\n\nimport IngredientForm from './IngredientForm';\nimport Search from './Search';\nimport IngredientList from './IngredientList';\nimport ErrorModal from '../UI/ErrorModal';\n\n//reducer takes in 2 arguments, the old state and an action\nconst ingredientReducer = (currentIngredients, action) => {\n  switch (action.type) {\n    case 'SET':\n      return action.ingredients; //our new ingredients, SET should override current ingredients with a new list/array. Hence the ingredients property which should be an array of ingredients which will replace the old state\n    case 'ADD':\n      return [...currentIngredients, action.ingredient];\n    case 'DELETE':\n      return currentIngredients.filter(ing => ing.id !== action.id);\n    default:\n      throw new Error('Should not get here');\n  }\n}\n\n//useCallback allows you to wrap a function that takes in two arguments, it caches your function for you so it survives rerender cycles\n// Line 21 when user submits a form on ingredients form, it will pass up the value to addIngredientHandler\nconst Ingredients = () => {\n  //useReducer returns something, that something is an array but with state (userIngredients). Second argument is something to set our userIngredients, \n  //which we are using in our reducer function (ingredientReducer)\n  //we'll call it dispatch because dispatch will be a function that call to dispatch these actions later in ingredientReducer.\n  //userReducer takes a first argument our reducer function and takes an optional second argument, starting state which we will set an an empty array\n  const [userIngredients, dispatch] = useReducer(ingredientReducer, []);\n  // const [userIngredients, setUserIngredients] = useState([]);\n\n  useEffect(() => {\n    console.log('RENDERING INGREDIENTS', userIngredients);\n  }, [userIngredients]);\n\n  //connect to search component, so when the user uses the filter/useEffect, it sends the data to this method\n  const filterIngredientsHandler = useCallback(filterIngredients => {\n    //dispatch an action, which can be anything but often its an object with a type property describing what action we want to do. And it needs an ingredients property to work properly\n    //with this we're updating our userIngredients\n    dispatch({type: 'SET', ingredients: filterIngredients})\n  }, []);\n\n  //set user ingredient should now have a id, title, and amount object\n  //user adds an ingredient, it will update the ingredients array on line 10 then to 25\n  const addIngredientHandler = useCallback(ingredient => {\n    dispatchHttp({type: 'SEND'});\n    // setIsLoading(true);\n    console.log(\"ingredient: \", ingredient);\n    //send HTTP request, browser function, not a react function\n    //fetch will return a promise, which will resolve once this request is successfully sent or fails\n    fetch('https://react-hooks-update-77b76-default-rtdb.firebaseio.com/ingredients.json', {\n      method: 'POST',\n      body: JSON.stringify({ingredient}),\n      headers: { 'Content-Type': 'application/json' }\n    }).then(response => {\n        //execute after response\n        dispatchHttp({type: 'RESPONSE'});\n        // setIsLoading(false);\n      return response.json(); //body of the response, will convert JSON to normal JS code. This returns a promise so we should return it then run another then function.\n    }).then (responseData => {\n      //only set the ingredien when the request is done as well as when the response parsing is finished\n      // setUserIngredients(previousIngredient => [...previousIngredient,\n      //   { id:responseData.name, ...ingredient }]);  \n      dispatch({type: 'ADD', ingredient: { id:responseData.name, ...ingredient }})\n        //response.name is a unique id generated by firebase, name will be different for other APIs\n    });\n  }, []);\n\n  const removeIngredientHandler = useCallback(ingredientId => {\n    console.log('removeIngredient: ', ingredientId);\n    dispatchHttp({type: 'SEND'});\n    // setIsLoading(true);\n    fetch(\n      `https://react-hooks-update-77b76-default-rtdb.firebaseio.com/ingredients/${ingredientId}.json`, \n      {\n        method: 'DELETE',\n      }\n    ).then(response => {\n      dispatchHttp({type: 'RESPONSE'});\n      // setIsLoading(false);\n      // setUserIngredients(previousIngredient => {\n      //   previousIngredient.filter(ingredient => ingredient.id !== ingredientId);\n      // });\n      dispatch({ type: 'DELETE', id: ingredientId});\n    }).catch(error => {\n      dispatchHttp({type: 'ERROR', errorMessage: 'Something went wrong'});\n      // setError(error.message);\n      // setIsLoading(false);\n    });\n  }, []);\n\n  const clearError= useCallback(() => {\n    dispatchHttp({type: 'CLEAR'});\n    // setError(null); \n  }, []);\n  \n  const ingredientList = useMemo(() => {\n    return (        \n      <IngredientList ingredients={userIngredients} onRemoveItem={removeIngredientHandler}/>\n    )\n  }, [userIngredients, removeIngredientHandler])\n\n  return (\n    <div className=\"App\">\n      {httpState.error && <ErrorModal onClose={clearError}>{httpState.error}</ErrorModal>}\n\n      <IngredientForm \n        onAddIngredient={addIngredientHandler} \n        loading={httpState.isLoading}/>\n\n      <section>\n        <Search onLoadIngredients={filterIngredientsHandler}/>\n        {ingredientList}\n      </section>\n    </div>\n  );\n}\n\nexport default Ingredients;\n"]},"metadata":{},"sourceType":"module"}