{"ast":null,"code":"var _jsxFileName = \"E:\\\\App Development\\\\React\\\\react-projects\\\\react-hooks-todo\\\\src\\\\components\\\\Ingredients\\\\Ingredients.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useReducer, useEffect, useCallback } from 'react';\nimport IngredientForm from './IngredientForm';\nimport Search from './Search';\nimport IngredientList from './IngredientList';\nimport ErrorModal from '../UI/ErrorModal'; //reducer takes in 2 arguments, the old state and an action\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ingredientReducer = (currentIngredients, action) => {\n  switch (action.type) {\n    case 'SET':\n      return action.ingredients;\n    //our new ingredients, SET should override current ingredients with a new list/array. Hence the ingredients property which should be an array of ingredients which will replace the old state\n\n    case 'ADD':\n      return [...currentIngredients, action.ingredient];\n\n    case 'DELETE':\n      return currentIngredients.filter(ing => ing.id !== action.id);\n\n    default:\n      throw new Error('Should not get here');\n  }\n}; //here we're using reducer to manager our state to reflect the UI, we're not actually sending the state. Only thing we want to display is loading icon or an error\n\n\nconst httpReducer = (currentHttpState, action) => {\n  //what 3 scenarios do you get when running an HTTP request? Hence the switch cases\n  switch (action.type) {\n    case 'SEND':\n      return {\n        isLoading: true,\n        error: null\n      };\n\n    case 'RESPONSE':\n      return { ...currentHttpState,\n        isLoading: false\n      };\n\n    case 'ERROR':\n      return {\n        loading: true,\n        error: action.errorMessage\n      };\n\n    case 'CLEAR':\n      return { ...currentHttpState,\n        error: null\n      };\n\n    default:\n      throw new Error('Should not get here');\n  }\n}; //useCallback allows you to wrap a function that takes in two arguments, it caches your function for you so it survives rerender cycles\n// Line 21 when user submits a form on ingredients form, it will pass up the value to addIngredientHandler\n\n\nconst Ingredients = () => {\n  _s();\n\n  //useReducer returns something, that something is an array but with state (userIngredients). Second argument is something to set our userIngredients, \n  //which we are using in our reducer function (ingredientReducer)\n  //we'll call it dispatch because dispatch will be a function that call to dispatch these actions later in ingredientReducer.\n  //userReducer takes a first argument our reducer function and takes an optional second argument, starting state which we will set an an empty array\n  const [userIngredients, dispatch] = useReducer(ingredientReducer, []); // const [userIngredients, setUserIngredients] = useState([]);\n\n  const [httpState, dispatchHttp] = useReducer(httpReducer, {\n    isLoading: false,\n    error: null\n  }); // const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState();\n\n  useEffect(() => {\n    console.log('RENDERING INGREDIENTS', userIngredients);\n  }, [userIngredients]); //connect to search component, so when the user uses the filter/useEffect, it sends the data to this method\n\n  const filterIngredientsHandler = useCallback(filterIngredients => {\n    //dispatch an action, which can be anything but often its an object with a type property describing what action we want to do. And it needs an ingredients property to work properly\n    //with this we're updating our userIngredients\n    dispatch({\n      type: 'SET',\n      ingredients: filterIngredients\n    });\n  }, []); //set user ingredient should now have a id, title, and amount object\n  //user adds an ingredient, it will update the ingredients array on line 10 then to 25\n\n  const addIngredientHandler = useCallback(ingredient => {\n    dispatchHttp({\n      type: 'SEND'\n    }); // setIsLoading(true);\n\n    console.log(\"ingredient: \", ingredient); //send HTTP request, browser function, not a react function\n    //fetch will return a promise, which will resolve once this request is successfully sent or fails\n\n    fetch('https://react-hooks-update-77b76-default-rtdb.firebaseio.com/ingredients.json', {\n      method: 'POST',\n      body: JSON.stringify({\n        ingredient\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      //execute after response\n      dispatchHttp({\n        type: 'RESPONSE'\n      }); // setIsLoading(false);\n\n      return response.json(); //body of the response, will convert JSON to normal JS code. This returns a promise so we should return it then run another then function.\n    }).then(responseData => {\n      //only set the ingredien when the request is done as well as when the response parsing is finished\n      // setUserIngredients(previousIngredient => [...previousIngredient,\n      //   { id:responseData.name, ...ingredient }]);  \n      dispatch({\n        type: 'ADD',\n        ingredient: {\n          id: responseData.name,\n          ...ingredient\n        }\n      }); //response.name is a unique id generated by firebase, name will be different for other APIs\n    });\n  }, []);\n\n  const removeIngredient = ingredientId => {\n    console.log('removeIngredient: ', ingredientId);\n    dispatchHttp({\n      type: 'SEND'\n    }); // setIsLoading(true);\n\n    fetch(`https://react-hooks-update-77b76-default-rtdb.firebaseio.com/ingredients/${ingredientId}.json`, {\n      method: 'DELETE'\n    }).then(response => {\n      dispatchHttp({\n        type: 'RESPONSE'\n      }); // setIsLoading(false);\n      // setUserIngredients(previousIngredient => {\n      //   previousIngredient.filter(ingredient => ingredient.id !== ingredientId);\n      // });\n\n      dispatch({\n        type: 'DELETE',\n        id: ingredientId\n      });\n    }).catch(error => {\n      dispatchHttp({\n        type: 'ERROR',\n        errorMessage: 'Something went wrong'\n      }); // setError(error.message);\n      // setIsLoading(false);\n    });\n  };\n\n  const clearError = () => {\n    dispatchHttp({\n      type: 'CLEAR'\n    }); // setError(null); \n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [httpState.error && /*#__PURE__*/_jsxDEV(ErrorModal, {\n      onClose: clearError,\n      children: httpState.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(IngredientForm, {\n      onAddIngredient: addIngredientHandler,\n      loading: httpState.isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(Search, {\n        onLoadIngredients: filterIngredientsHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IngredientList, {\n        ingredients: userIngredients,\n        onRemoveItem: removeIngredient\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Ingredients, \"E18EZ9KcFBAM/DgffuYwkPWStWQ=\");\n\n_c = Ingredients;\nexport default Ingredients;\n\nvar _c;\n\n$RefreshReg$(_c, \"Ingredients\");","map":{"version":3,"sources":["E:/App Development/React/react-projects/react-hooks-todo/src/components/Ingredients/Ingredients.js"],"names":["React","useState","useReducer","useEffect","useCallback","IngredientForm","Search","IngredientList","ErrorModal","ingredientReducer","currentIngredients","action","type","ingredients","ingredient","filter","ing","id","Error","httpReducer","currentHttpState","isLoading","error","loading","errorMessage","Ingredients","userIngredients","dispatch","httpState","dispatchHttp","console","log","filterIngredientsHandler","filterIngredients","addIngredientHandler","fetch","method","body","JSON","stringify","headers","then","response","json","responseData","name","removeIngredient","ingredientId","catch","clearError"],"mappings":"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","sourcesContent":["import React, { useState, useReducer, useEffect, useCallback } from 'react';\n\nimport IngredientForm from './IngredientForm';\nimport Search from './Search';\nimport IngredientList from './IngredientList';\nimport ErrorModal from '../UI/ErrorModal';\n\n//reducer takes in 2 arguments, the old state and an action\nconst ingredientReducer = (currentIngredients, action) => {\n  switch (action.type) {\n    case 'SET':\n      return action.ingredients; //our new ingredients, SET should override current ingredients with a new list/array. Hence the ingredients property which should be an array of ingredients which will replace the old state\n    case 'ADD':\n      return [...currentIngredients, action.ingredient];\n    case 'DELETE':\n      return currentIngredients.filter(ing => ing.id !== action.id);\n    default:\n      throw new Error('Should not get here');\n  }\n}\n\n//here we're using reducer to manager our state to reflect the UI, we're not actually sending the state. Only thing we want to display is loading icon or an error\nconst httpReducer = (currentHttpState, action) => {\n  //what 3 scenarios do you get when running an HTTP request? Hence the switch cases\n  switch (action.type) {\n    case 'SEND':\n      return { isLoading: true, error: null };\n    case 'RESPONSE':\n      return { ...currentHttpState, isLoading: false };\n    case 'ERROR':\n      return { loading: true, error: action.errorMessage };\n    case 'CLEAR':\n      return { ...currentHttpState, error: null };\n    default:\n      throw new Error('Should not get here');\n  }\n}\n\n//useCallback allows you to wrap a function that takes in two arguments, it caches your function for you so it survives rerender cycles\n// Line 21 when user submits a form on ingredients form, it will pass up the value to addIngredientHandler\nconst Ingredients = () => {\n  //useReducer returns something, that something is an array but with state (userIngredients). Second argument is something to set our userIngredients, \n  //which we are using in our reducer function (ingredientReducer)\n  //we'll call it dispatch because dispatch will be a function that call to dispatch these actions later in ingredientReducer.\n  //userReducer takes a first argument our reducer function and takes an optional second argument, starting state which we will set an an empty array\n  const [userIngredients, dispatch] = useReducer(ingredientReducer, []);\n  // const [userIngredients, setUserIngredients] = useState([]);\n  const [httpState, dispatchHttp] = useReducer(httpReducer, { isLoading: false, error: null });\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState();\n\n  useEffect(() => {\n    console.log('RENDERING INGREDIENTS', userIngredients);\n  }, [userIngredients]);\n\n  //connect to search component, so when the user uses the filter/useEffect, it sends the data to this method\n  const filterIngredientsHandler = useCallback(filterIngredients => {\n    //dispatch an action, which can be anything but often its an object with a type property describing what action we want to do. And it needs an ingredients property to work properly\n    //with this we're updating our userIngredients\n    dispatch({type: 'SET', ingredients: filterIngredients})\n  }, []);\n\n  //set user ingredient should now have a id, title, and amount object\n  //user adds an ingredient, it will update the ingredients array on line 10 then to 25\n  const addIngredientHandler = useCallback(ingredient => {\n    dispatchHttp({type: 'SEND'});\n    // setIsLoading(true);\n    console.log(\"ingredient: \", ingredient);\n    //send HTTP request, browser function, not a react function\n    //fetch will return a promise, which will resolve once this request is successfully sent or fails\n    fetch('https://react-hooks-update-77b76-default-rtdb.firebaseio.com/ingredients.json', {\n      method: 'POST',\n      body: JSON.stringify({ingredient}),\n      headers: { 'Content-Type': 'application/json' }\n    }).then(response => {\n        //execute after response\n        dispatchHttp({type: 'RESPONSE'});\n        // setIsLoading(false);\n      return response.json(); //body of the response, will convert JSON to normal JS code. This returns a promise so we should return it then run another then function.\n    }).then (responseData => {\n      //only set the ingredien when the request is done as well as when the response parsing is finished\n      // setUserIngredients(previousIngredient => [...previousIngredient,\n      //   { id:responseData.name, ...ingredient }]);  \n      dispatch({type: 'ADD', ingredient: { id:responseData.name, ...ingredient }})\n        //response.name is a unique id generated by firebase, name will be different for other APIs\n    });\n  }, []);\n\n  const removeIngredient = ingredientId => {\n    console.log('removeIngredient: ', ingredientId);\n    dispatchHttp({type: 'SEND'});\n    // setIsLoading(true);\n    fetch(\n      `https://react-hooks-update-77b76-default-rtdb.firebaseio.com/ingredients/${ingredientId}.json`, \n      {\n        method: 'DELETE',\n      }\n    ).then(response => {\n      dispatchHttp({type: 'RESPONSE'});\n      // setIsLoading(false);\n      // setUserIngredients(previousIngredient => {\n      //   previousIngredient.filter(ingredient => ingredient.id !== ingredientId);\n      // });\n      dispatch({ type: 'DELETE', id: ingredientId});\n    }).catch(error => {\n      dispatchHttp({type: 'ERROR', errorMessage: 'Something went wrong'});\n      // setError(error.message);\n      // setIsLoading(false);\n    });\n  }\n\n  const clearError= () => {\n    dispatchHttp({type: 'CLEAR'});\n    // setError(null); \n  }\n\n  return (\n    <div className=\"App\">\n      {httpState.error && <ErrorModal onClose={clearError}>{httpState.error}</ErrorModal>}\n      <IngredientForm \n        onAddIngredient={addIngredientHandler} \n        loading={httpState.isLoading}/>\n      <section>\n        <Search onLoadIngredients={filterIngredientsHandler}/>\n        <IngredientList ingredients={userIngredients} onRemoveItem={removeIngredient}/>\n      </section>\n    </div>\n  );\n}\n\nexport default Ingredients;\n"]},"metadata":{},"sourceType":"module"}